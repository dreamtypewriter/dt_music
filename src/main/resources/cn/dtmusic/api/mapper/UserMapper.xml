<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.dtmusic.api.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="cn.dtmusic.api.entity.User">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="user_nickname" jdbcType="VARCHAR" property="userNickname" />
    <result column="user_phone" jdbcType="CHAR" property="userPhone" />
    <result column="user_password" jdbcType="VARCHAR" property="userPassword" />
    <result column="user_avatar" jdbcType="VARCHAR" property="userAvatar" />
    <result column="user_gender" jdbcType="VARCHAR" property="userGender" />
    <result column="user_birthday" jdbcType="DATE" property="userBirthday" />

    <result column="user_introduce" jdbcType="VARCHAR" property="userIntroduce" />
    <result column="user_province" jdbcType="VARCHAR" property="userProvince" />
    <result column="user_city" jdbcType="VARCHAR" property="userCity" />
    <result column="user_level" jdbcType="INTEGER" property="userLevel" />
    <result column="followed_number" jdbcType="INTEGER" property="followedNumber" />
    <result column="fans_number" jdbcType="INTEGER" property="fansNumber" />
    <result column="message_number" jdbcType="INTEGER" property="messageNumber" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="modify_date" jdbcType="TIMESTAMP" property="modifyDate" />
    <result column="user_status" jdbcType="TINYINT" property="userStatus"/>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.dtmusic.api.entity.User"
          useGeneratedKeys="true" keyColumn="user_id" keyProperty="userId">
    insert into t_user (user_nickname, user_phone,user_password)
    values (#{userNickname,jdbcType=VARCHAR}, #{userPhone,jdbcType=CHAR},#{userPassword,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="cn.dtmusic.api.entity.User">
    update t_user
    set user_nickname = #{userNickname,jdbcType=VARCHAR},
      user_gender = #{userGender,jdbcType=VARCHAR},
      user_birthday = #{userBirthday,jdbcType=DATE},
      user_introduce = #{userIntroduce,jdbcType=VARCHAR},
      user_province = #{userProvince,jdbcType=VARCHAR},
      user_city = #{userCity,jdbcType=VARCHAR}
    where user_phone = #{userPhone,jdbcType=INTEGER}
  </update>


  <select id="selectByPrimaryKey" parameterType="string" resultMap="BaseResultMap">
    select user_id, user_nickname, user_phone, user_password, user_avatar, user_gender,
    user_birthday,user_introduce, user_province, user_city, user_level, followed_number, fans_number,
    message_number, create_date, modify_date,user_status
    from t_user
    where user_phone = #{userPhone,jdbcType=CHAR}
  </select>


  <select id="selectAll" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Sat Oct 03 16:26:13 CST 2020.
    -->
    select user_id, user_nickname, user_phone, user_password, user_avatar, user_gender,
    user_birthday,user_introduce, user_province, user_city, user_level, followed_number, fans_number,
    message_number, create_date, modify_date,user_status
    from t_user
  </select>
  <select id="queryUserByUserId" resultMap="BaseResultMap">
    select * from t_user
    where user_id =#{userId}
  </select>

    <select id="selectByConditions" resultMap="BaseResultMap">
    select user_id,
    user_nickname,
    user_avatar,
    followed_number,
    fans_number,
    create_date,
    user_status
    from t_user
    <where>
      <if test="searchUserName != null and searchUserName!= '' ">user_nickname like '%${searchUserName}%'</if>
      <if test="searchStatus != null and searchStatus != 0">and user_status = #{searchStatus}</if>
    </where>
  </select>

  <update id="disableUser">
        update t_user
        set user_status = -1
        where user_id = #{userId}
    </update>

  <update id="enableUser">
        update t_user
        set user_status = 1
        where user_id = #{userId}
    </update>

  <!--根据手机号查询用户状态-->
  <select id="getUserStatusByUserPhone"  resultType="BYTE">
      select user_status from t_user where user_phone = #{userPhone}
  </select>

    <!--注册:根据手机号查询用户-->
    <select id="getUserByUserPhone" resultMap="BaseResultMap">
        select * from t_user where user_phone = #{userPhone}
    </select>
    <select id="getUserByUserNickname" resultMap="BaseResultMap">
        select * from t_user where user_nickname = #{userNickname}
    </select>

  <!--修改用户关注数:1.改变当前用户关注数2.改变对应用户粉丝数-->
  <update id="addNowUserFollow">
        update t_user
        set followed_number = (followed_number+1)
        where user_id = #{nowUserId}
  </update>
    <update id="deleteNowUserFollow">
        update t_user
        set followed_number = (followed_number-1)
        where user_id = #{nowUserId}
  </update>
    <!--修改用户粉丝数-->
    <update id="addFollowedUserFans">
        update t_user
        set fans_number = (fans_number + 1)
        where user_id = #{followedUserId}
  </update>

    <update id="deleteFollowedUserFans">
        update t_user
        set fans_number = (fans_number - 1)
        where user_id = #{followedUserId}
  </update>

</mapper>
